#+title: homework
#+title: Lecture 
#+author: Kazure Zheng
#+PROPERTY: header-args:cpp :prologue "#include <iostream>\n#include <string>\n#include "/home/kazure/Documents/cs_learning/cs106l/STL/simpio.h"\n\nusing namespace std;\n\nint main() {\n" :epilogue "\nreturn 0;\n}"



* hw02

** q1_1
#+begin_src python 
  some_numbers = make_array(-1, -3, -6, -10, -15)

  third_element = some_numbers[2]
  third_element
#+end_src


** q1_2
#+begin_src python 
  blank_a = "third"
  blank_b = "fourth"
  blank_c = 0
  blank_d = 3
  elements_of_some_numbers = Table().with_columns(
      "English name for position", make_array("first", "second", blank_a, blank_b, "fifth"),
      "Index",                     make_array(blank_c, 1, 2, blank_d, 4),
      "Element",                   some_numbers)
  elements_of_some_numbers
#+end_src



** q1_3
#+begin_src  python 
  index_of_last_element = 141
#+end_src



** q1_4
#+begin_src python
  president_birth_years = Table.read_table("president_births.csv").column('Birth Year')

  most_recent_birth_year = president_birth_years[-1]
  most_recent_birth_year
#+end_src


** q1_5
#+begin_src python 
  min_of_birth_years = min(president_birth_years[0], president_birth_years[15], president_birth_years[-1])
  min_of_birth_years
#+end_src


** q2_1
#+begin_src python 
  first_product = 42 * 157
  second_product = -4224 * 157
  third_product = 424224242 * 157
  fourth_product = 250 * 157
  print("First Product:", first_product)
  print("Second Product:", second_product)
  print("Third Product:", third_product)
  print("Fourth Product:", fourth_product)
#+end_src


** q2_2
#+begin_src python 
  numbers = make_array(42, -4224, 424224242, 250)
  products = make_array(0, 0, 0, 0)
  for i in range(4):
    products[i] = numbers[i] * 157
  products
#+end_src


** q2_3
#+begin_src python 
  correct_products = make_array(0,0,0,0)
  for i in range(4):
      correct_products[i] = numbers[i] * 1577
  correct_products
#+end_src


** q2_4
#+begin_src python 
  max_temperatures = Table.read_table("temperatures.csv").column("Daily Max Temperature")
  max_temperatures_celsius = max_temperatures
  for i in range(len(max_temperatures)):
      max_temperatures_celsius[i] = (max_temperatures[i] - 32) * 5 / 9
  celsius_temps_rounded = np.round(max_temperatures_celsius)
  celsius_temps_rounded
#+end_src


** q2_4
#+begin_src python 
  max_temperatures = Table.read_table("temperatures.csv").column("Daily Max Temperature")

  max_temperatures_celsius = np.zeros_like(max_temperatures, dtype=float)

  # ÈÅçÂéÜÊØè‰∏™ÂçéÊ∞èÊ∏©Â∫¶Âπ∂ËΩ¨Êç¢‰∏∫ÊëÑÊ∞èÊ∏©Â∫¶
  for i in range(len(max_temperatures)):
      max_temperatures_celsius[i] = (max_temperatures[i] - 32) * 5 / 9

  # Â∞ÜÊëÑÊ∞èÊ∏©Â∫¶ÂõõËàç‰∫îÂÖ•Âà∞ÊúÄÊé•ËøëÁöÑÊï¥Êï∞
  celsius_temps_rounded = np.round(max_temperatures_celsius)
  celsius_temps_rounded

#+end_src


** q2_5
#+begin_src python 
  min_temperatures = Table.read_table("temperatures.csv").column("Daily Min Temperature")

  celsius_temperature_ranges = np.zeros_like(max_temperatures, dtype=float)
  for i in range(len(max_temperatures)):
      celsius_temperature_ranges[i] = (max_temperatures[i] - min_temperatures[i]) * 5/9
  celsius_temperature_ranges
#+end_src


** q3_1
#+begin_src python 
  waiting_times = Table.read_table('old_faithful.csv').column('waiting')

  shortest = min(waiting_times)
  longest = max(waiting_times)
  average = 0
  for i in range(len(waiting_times)):
      average += waiting_times[i]
  average /= len(waiting_times)

  print("Old Faithful erupts every", shortest, "to", longest, "minutes and every", average, "minutes on average.")
#+end_src


** q3_2
~np.diff()~ is the right - left, which is increase value,  so you need to find the minimum.

#+begin_src python 
  # np.diff() calculates the difference between subsequent values in a NumPy array
  # where the first value is subtracted from the second value

  differences = np.diff(waiting_times)
  biggest_decrease = np.abs(np.min(differences))
  biggest_decrease
#+end_src


* Table Manipulation and Visualization

** Question 1
*** q1_1
#+begin_src python 
  us_birth_rate = sum(pop.column('BIRTHS')) / sum(pop.column('2015'))
  us_birth_rate
#+end_src

*** q1_2
#+begin_src python 
  migration_rates = pop.with_columns(
      'migration_rate', pop.column('MIGRATION') / pop.column('2015')
  )
  movers = len(migration_rates.where('migration_rate', are.above(0.01)).column('NAME'))
  movers
#+end_src


*** q1_3
#+begin_src python 
  west_births = pop.where('REGION', are.equal_to(4)).column('BIRTHS').sum()
  west_births
#+end_src


*** q1_4
#+begin_src python 
  visualization = 3
#+end_src


*** q1_5
#+begin_src python 
  # In this cell, use birth_rates and death_rates to generate your visualization
  birth_rates_2015 = pop.column('BIRTHS') / pop.column('2015')
  death_rates_2015 = pop.column('DEATHS') / pop.column('2015')

  birth_death = Table().with_columns(
      'NAME', pop.column('NAME'),
      'birth_rates', birth_rates_2015,
      'death_rates', death_rates_2015
  )

  birth_death.scatter('NAME')
  birth_death.plot('NAME')
#+end_src


*** q1_6
#+begin_src python 
  assoc = True
#+end_src

** Question 2

*** q2_1
#+begin_src python
  equal_bins = np.arange(0, 120, 5)

  boston.hist('ride time', bins=equal_bins, unit="hours")
#+end_src


*** q2_2
#+begin_src python 
  equal_bins = np.arange(0, 120, 5)
  manila.hist('ride time', bins=equal_bins, unit="hours")

  # Don't delete the following line!
  plt.ylim(0, 0.05);
#+end_src


*** q2_3
#+begin_src python 
  unit_meaning = 1
  unit_meaning
#+end_src


*** q2_4
#+begin_src python 
  boston_under_5_bin_height = 1.2
  manila_under_5_bin_height = 0.6
  boston_5_to_under_10_bin_height = 3.2
  manila_5_to_under_10_bin_height = 1.4
  boston_10_to_under_15_bin_height = 4.9
  manila_10_to_under_15_bin_height = 2.2

  boston_under_15 = boston_under_5_bin_height + boston_5_to_under_10_bin_height + boston_10_to_under_15_bin_height
  manila_under_15 = manila_under_5_bin_height + manila_5_to_under_10_bin_height + manila_10_to_under_15_bin_height


  boston_under_15, manila_under_15
#+end_src


*** q2_5
#+begin_src  python 
  boston_median_bin = 2
  boston_median_bin
#+end_src


** Question 3

*** q3_1
#+begin_src python 
  histogram_column_x = 1
#+end_src

*** q3_3
#+begin_src python 
  histogram_column_y = 2
#+end_src

** Question 4

*** q4_1
#+begin_src python 
  def sum_scores(a, b, c, d):
      '''Returns the total score calculated by adding up the score of each quarter'''
      return a+b+c+d

  sum_scores(14, 7, 3, 0) #DO NOT CHANGE THIS LINE
#+end_src


*** q4_2
#+begin_src python
  cal_scores = sum_scores(games.column('Cal 1Q'), games.column('Cal 2Q'), games.column('Cal 3Q'), games.column('Cal 4Q'))

  opp_scores = sum_scores(games.column('Opp 1Q'), games.column('Opp 2Q'), games.column('Opp 3Q'), games.column('Opp 4Q'))

  final_scores = Table().with_columns(
      'Opponent', games.column('Opponent'),
      'Cal Score', cal_scores,
      'Opponent Score', opp_scores
  )

  final_scores
#+end_src


*** q4_3
#+begin_src python
  def did_cal_lose(game_row):
      if (game_row.item(1) < game_row.item(2)):
          return True
      else:
          return False


  did_cal_lose(final_scores.row(1)) #DO NOT CHANGE THIS LINE
#+end_src


*** q4_4
#+begin_src python 
  n = len(final_scores.column('Opponent'))
  results_array = np.arange(n)

  for i in range(n):
      results_array[i] = did_cal_lose(final_scores.row(i))

  final_scores_with_results = final_scores.with_columns(
      'Results', results_array
  )

  cal_losses = len(final_scores_with_results.where('Results', 0).column('Opponent'))
  cal_wins = len(final_scores_with_results.where('Results', 1).column('Opponent'))


  # Don't delete or edit the following line:
  print(f"In the 2023 Season, Cal Football won {cal_wins} games and lost {cal_losses} games. Go Bears! üêª")
#+end_src


* Local Variables

# Local Variables:
# org-babel-python-command: "./materials-sp25/.venv/bin/python"
# End:


