#+title: Labs: Data8 Foundations of Data Science

* Lab 1

** how to use jupyter-books

*** Problem

there is a problem: you can not install the *otter* package, but you can
install *otter-grader* instead.


*** hotkeys
:PROPERTIES:
:ID:       824d9055-8a71-4c7a-a550-3ca562d8bf6d
:END:


#+DOWNLOADED: screenshot @ 2025-07-09 12:42:14
[[file:img/2025-07-09_12-42-14_screenshot.png]]

** How to use python


*** calculation
#+begin_src python
  print(3*4)
  print(3**4)
#+end_src

#+RESULTS:
: 12
: 81

*** don't use method as name
- max
- min
- abs

#+begin_src python
  max = 13
  print(max)
  # max(4,6)

#+end_src

#+RESULTS:
: 13

#+begin_src python
  max = 13
  print(max)
  max(4,6)
#+end_src

* TODO lab 2

** calculate
#+property: header-args:python :prologue "import math"

*** floor

calculate the largest integer no larger than the specific nmber
#+begin_src python
  print(math.floor(4))
  print(math.floor(4.5))
#+end_src

#+RESULTS:
: 4
: 4

*** logarithm

#+begin_src python
  # math.log(num, base)
  a = math.log(8, 2)
  print(a)
#+end_src

#+RESULTS:
: 3.0

*** special import

#+begin_src python :prologue ""
  from math import log
  print(log(8,2))

  print(math.floor(4.5))

#+end_src

#+RESULTS:
: 3.0


#+begin_src python :prologue ""
  from math import *

  print(log(8,2))
  print(floor(4.5))
#+end_src

#+RESULTS:
: 3.0
: 4




** table operations
:PROPERTIES:
:ID:       7a3fa84b-b759-4d74-a76f-af7213c64a29
:END:

#+DOWNLOADED: screenshot @ 2025-07-16 16:02:42
[[file:img/2025-07-16_16-02-42_screenshot.png]]


attribute is on the first row.

table is a fundamental data type, it takes up from rows and columns.

*** select

#+begin_src python
  cones.show(2) # it will show 2 rows.

  cones.select('Flavor') # select a column
  cones.select('Flavor', 'Price') # select multiple columns
#+end_src


*** delete

delete the specific column.

#+begin_src python
  cones.drop('Color')
#+end_src

*** sort

~sort~ method sort the elements in specific columns ascendingly.

#+begin_src python
  cones.sort('Price')
  
  cones.sort('Price', descending=True)
#+end_src

*** select rows that satisfy a condition

#+begin_src python
  cones.where('Flavor', 'chocolate') # select the row that Flavor is chocolate
#+end_src


*** read

#+begin_src python
  from datascience import *
  import pkg_resources

  farmers_markets = Table.read_table('./materials-sp25/lab/lab02/farmers_markets.csv')

  farmers_markets.show(3)
#+end_src

#+RESULTS:
: <IPython.core.display.HTML object>

*** others
:PROPERTIES:
:ID:       8301010f-506d-4f9d-a6d9-f7c0db22d94f
:END:

#+DOWNLOADED: screenshot @ 2025-07-16 17:50:11
[[file:img/2025-07-16_17-50-11_screenshot.png]]


** Question

*** q11

#+begin_src python
  a = 2**6 - 2**11 - 2**5
  b = 5*13*31+10
  new_year = max(a,b)
  print(new_year)
#+end_src

#+RESULTS:
: 2025

*** q21

#+begin_src python
  import math
  near_twenty = math.e ** math.pi - math.pi
  print(near_twenty)
#+end_src

#+RESULTS:
: 19.99909997918947

*** q211
#+begin_src python
  import math
  floor_of_pi = math.floor(math.pi)
  print(floor_of_pi)
#+end_src

#+RESULTS:
: 3
** q32

#+begin_src python
  num_farmers_markets_columns = farmers_markets.num_columns
  print("The table has", num_farmers_markets_columns, "columns in it!")
#+end_src
** q33

#+begin_src python
  farmers_markets_locations = farmers_markets.select('MarketName', 'city', 'State', 'x', 'y')
  farmers_markets_locations
#+end_src
** q34

#+begin_src python
  farmers_markets_without_fmid = farmers_markets.drop('FMID', 'updateTime')
  farmers_markets_without_fmid
#+end_src
** q35
#+begin_src python
  farmers_markets_locations_by_latitude = farmers_markets.sort('y', descending=True)
  farmers_markets_locations_by_latitude
#+end_src
** q36
#+begin_src python
  berkeley_markets = california_farmers_markets.where('city', are.equal_to('Berkeley'))
  berkeley_markets
#+end_src
** q41

#+begin_src python
  above_eight = imdb.where('Year', are.between_or_equal_to(2010, 2015)).where('Rating', are.above(8))
  above_eight = above_eight.sort('Rating', descending=True)
  above_eight = above_eight.select('Title', 'Rating')
  above_eight
#+end_src
** q42
#+begin_src python
  num_movies_in_dataset = imdb.num_rows

  num_in_20th_century = imdb.where('Year', are.between(1900, 2000)).num_rows
  num_in_21st_century = imdb.where('Year', are.above_or_equal_to(2000)).num_rows

  proportion_in_20th_century = num_in_20th_century/num_movies_in_dataset
  proportion_in_21st_century = num_in_21st_century/num_movies_in_dataset

  print("Proportion in 20th century:", proportion_in_20th_century)
  print("Proportion in 21st century:", proportion_in_21st_century)
#+end_src

* COMMENT Local Variables

# Local Variables:
# org-babel-python-command: "./materials-sp25/.venv/bin/python"
# End:


